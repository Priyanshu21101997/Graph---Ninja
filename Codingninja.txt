bool isSafe(char Grid[][MAXN], char word[], int **visited, int x, int y , int N, int M ){

if(x>= 0 && y>=0 && x<N && y <M && visited[x][y] ==0 && Grid[x][y] == word[0]) 
	return true;

return false;

}

int len(char word[]){
    int l=0;
    while(word[l]!='\0'){
        l++;
    }
    
    return l;
}

bool solver(char Grid[][MAXN], char word[], int **visited, int x , int y, int N, int M){

    if(len(word)== 1 ){
        return true;
    }

        int a[]={-1,-1,0,1,1,1,0,-1}; 
        int b[]={0,1,1,1,0,-1,-1,-1};

if (isSafe(Grid,word,visited,x,y,N,M)){
    
    visited[x][y]=1;
    
    for(int k=0;k<8;k++){
        if(solver(Grid,word+1,visited,x+a[k],y+b[k],N,M)){
            return true;
        }
    }
            visited[x][y]=0;

}
    
    return false;
}

int solve(char Graph[][MAXN],int N, int M)
{
    
    char word[]= "CODINGNINJAS";
	
    int **visited= new int*[N];
    for(int i =0; i<N; i++){
        visited[i] =new int[M];
        for(int j=0 ; j<M; j++){
            visited[i][j] =0;
        }
    }
    
    for(int i =0; i<N; i++){
        for(int j=0; j<M; j++){
            if(Graph[i][j] =='C'){
               if (solver(Graph, word, visited, i, j, N, M))
                   return 1;
            }
        }
    }
    
    return 0;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------


#include<bits/stdc++.h>
#define pi pair<int,pair<int,int>>
using namespace std;

int findfn(int *parent,int e){
	if(parent[e]==-1){
		return e;
	}

	return parent[e]=findfn(parent,parent[e]);
}

bool unionn(int *parent,int e1,int e2,int * rank){
	int p1=findfn(parent,e1);
	int p2=findfn(parent,e2);

	if(p1==p2){
		return false;
	}

	if(rank[p1]>rank[p2]){
		parent[p2]=p1;
		rank[p1]+=rank[p2];
	}

	else{
		parent[p1]=p2;
		rank[p2]+=rank[p1];
	}

	return true;
}

int main(){
	int n;
	cin>>n;
	int nodes;
	cin>>nodes;
	int parent[n+1];
	int rank[n+1];
	for(int i=0;i<=n;i++){
		parent[i]=-1;
		rank[i]=1;
	}
	for(int i=0;i<nodes;i++){
		int u,v;
		cin>>u>>v;
		unionn(parent,u,v,rank);
	}

	int e;
	cin>>e;
	priority_queue<pi,vector<pi>,greater<pi>> pq;
	for(int i=0;i<e;i++){
		int s,d,c;
		cin>>s>>d>>c;
		pq.push({c,{s,d}});
	}


	int amount=0;
	while(!pq.empty() && nodes<n-1 ){
		pi top=pq.top();
		pq.pop();
		int e1=top.second.first;
		int e2=top.second.second;
		int cost=top.first;
		if(unionn(parent,e1,e2,rank)){
			amount+=cost;
			nodes++;
		}
	}

	cout<<amount<<endl;

}
