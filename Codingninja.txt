bool isSafe(char Grid[][MAXN], char word[], int **visited, int x, int y , int N, int M ){

if(x>= 0 && y>=0 && x<N && y <M && visited[x][y] ==0 && Grid[x][y] == word[0]) 
	return true;

return false;

}

int len(char word[]){
    int l=0;
    while(word[l]!='\0'){
        l++;
    }
    
    return l;
}

bool solver(char Grid[][MAXN], char word[], int **visited, int x , int y, int N, int M){

    if(len(word)== 1 ){
        return true;
    }

        int a[]={-1,-1,0,1,1,1,0,-1}; 
        int b[]={0,1,1,1,0,-1,-1,-1};

if (isSafe(Grid,word,visited,x,y,N,M)){
    
    visited[x][y]=1;
    
    for(int k=0;k<8;k++){
        if(solver(Grid,word+1,visited,x+a[k],y+b[k],N,M)){
            return true;
        }
    }
            visited[x][y]=0;

}
    
    return false;
}

int solve(char Graph[][MAXN],int N, int M)
{
    
    char word[]= "CODINGNINJAS";
	
    int **visited= new int*[N];
    for(int i =0; i<N; i++){
        visited[i] =new int[M];
        for(int j=0 ; j<M; j++){
            visited[i][j] =0;
        }
    }
    
    for(int i =0; i<N; i++){
        for(int j=0; j<M; j++){
            if(Graph[i][j] =='C'){
               if (solver(Graph, word, visited, i, j, N, M))
                   return 1;
            }
        }
    }
    
    return 0;
    
}